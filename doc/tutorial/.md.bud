/**
 * Bud file for tutorial markdowns.
 */

'use strict'

const coz = require('../../lib')
const expandglob = require('expandglob')
const fs = require('fs')
const path = require('path')
const os = require('os')
const stringcase = require('stringcase')
const EOL = os.EOL;
const format = require('util').format;
const async = require('async')

const pkg = require('../../package.json')
const bud = require('coz-bud/lib/spec')

function _urlItem (key, url) {
  return format('[%s]: %s', key, encodeURI(url))
}
function _linkItem (text, name) {
  return format('+ [%s][%s]', text, name)
}

function _wrapped (data, comment) {
  return [
    format('<!-- %s start -->', comment),
    EOL + data + EOL,
    format('<!-- %s end -->', comment)
  ].join(EOL)
}

function _tutorialBud (data) {
  data.force = true;
  data.mode = '444';
  data.mkdirp = true;
  return data;
}

function _budData (data) {
  data.pkg = pkg;
  data.bud = {
    about: bud.about,
    get properties () {
      return Object.keys(bud.properties).map(function (key) {
        let data = bud.properties[ key ]
        data.name = key;
        data.type = String(data.type).replace(/\|/g, '&#124;')
        return data;
      })
    }
  }
  return data;
}
function _concat (a, b) {
  return a.concat(b)
}

function _tutorialKey (filename) {
  return [
    'tutorial',
    stringcase.snakecase(path.basename(filename, path.extname(filename)))
  ].join('_').replace(/__+/g, '_')
}

function _urls (items) {
  let urls = items.reduce(_concat, []).map((obj) => {
    return _urlItem(obj.name, obj.url)
  }).join(EOL)
  return _wrapped(urls, 'URLs')
}

function _tutorials (filenames) {
  let tutorials = filenames.map(function (filename) {
    let url = _tutorialKey(filename) + '_url',
      name = path.basename(filename, path.extname(filename))
    return _linkItem(name, url)
  }).join(EOL)
  return _wrapped(tutorials, 'Tutorials')
}

function _seeAlso (filenames) {
  let seeAlso = filenames
    .filter(function (filename) {
      return !!filename;
    })
    .map(function (filename) {
      let url = _tutorialKey(filename.replace(/\.md\.hbs$/, '')) + '_url',
        name = path.basename(filename, '.md.hbs')
      return _linkItem(name.replace(/^[\._]/g, ''), url)
    }).join(EOL)
  return _wrapped(seeAlso, 'See also')
}

function _injectCodeMarkup (lines) {
  return lines.map(function (line, i, lines) {
    let prev = lines[ i - 1 ]
    if (/^```/.test(prev)) {
      // Add ink-doctrap lang markup.
      let lang = prev.replace(/```/, '').trim()
      if (lang) {
        return format('{@lang %s}', lang) + line;
      }
    }
    return line;
  })
}

module.exports = function (callback) {
  let links = require('./.links')
  let pattern = path.join(__dirname, '/.*.md.hbs')
  let filenames = expandglob.sync(pattern)
  let tutorials = expandglob.sync('*.md', { cwd: __dirname })
  let bud = filenames
    .map(function (filename, i) {
      let name = path.basename(filename, '.md.hbs').replace(/^\./, '')
      let lines = fs.readFileSync(filename).toString().split(EOL)

      return [
        _tutorialBud({
          path: name + '.md',
          tmpl: filename,
          data: _budData({
            get urls () {
              let linkUrls = Object.keys(links).map(function (name) {
                  return { name: name, url: links[ name ] }
                }),
                tutorialUrls = tutorials.map(function (filename) {
                  let name = _tutorialKey(filename) + '_url';
                  return { name: name, url: path.basename(filename) }
                })
              return _urls([ linkUrls, tutorialUrls ])
            },
            get tutorials () {
              return _tutorials(tutorials)
            },
            get seeAlso () {
              let filename = filenames[ i + 1 ]
              return _seeAlso([ filename ])
            }
          })
        }),
        _tutorialBud({
          path: '.jsdoc_precompiled/' + name + '.md',
          tmpl: _injectCodeMarkup(lines).join(EOL),
          data: _budData({
            get urls () {
              let linkUrls = Object.keys(links).map((name) => {
                  return { name: name, url: links[ name ] }
                }),
                tutorialUrls = tutorials.map((filename) => {
                  let name = _tutorialKey(filename) + '_url';
                  let basename = path.basename(filename, '.md')
                  return { name: name, url: 'tutorial-' + basename + '.html' }
                })
              return _urls([ linkUrls, tutorialUrls ])
            },
            get tutorials () {
              return _tutorials(tutorials)
            },
            get seeAlso () {
              let filename = filenames[ i + 1 ]
              return _seeAlso([ filename ])
            }
          })
        })
      ]
    })
    .reduce(_concat, [])
  callback(null, bud)

}

if (!module.parent) {
  coz.render(__filename)
}