/**
 * Bud file for tutorial markdowns.
 */

"use strict";

var coz = require('../../lib'),
    path = coz.core.path,
    fs = coz.core.fs,
    EOL = coz.core.os.EOL,
    format = coz.core.util.format,
    async = coz.ext.async,
    glob = coz.ext.glob
    ;

var pkg = require('../../package.json');

function _linkList(data) {
    return Object.keys(data).map(function (name) {
        return format('+ [%s](%s)', name, data[name]);
    }).join(EOL)
}

function _tutorialList(pattern) {
    pattern = path.resolve(__dirname, pattern);
    return glob.sync(pattern).map(function (filename) {
        var name = path.basename(filename, path.extname(filename));
        return format('+ [%s](tutorial-%s.html)', name, name);
    }).join(EOL);
}

function _wrapped(data, comment) {
    return [
        format('<!-- %s start -->', comment),
        EOL + data + EOL,
        format('<!-- %s end -->', comment)
    ].join(EOL);
}


function _concat(a, b) {
    return a.concat(b);
}

function _tutorialBud(src, dest, link, mapper) {
    return {
        force: true,
        mode: '444',
        path: dest,
        tmpl: fs.readFileSync(src).toString().split(EOL).map(function (line, i, lines) {
            if (mapper) {
                return mapper(line, i, lines)
            }
            return line;
        }).join(EOL),
        mkdirp: true,
        data: {
            pkg: pkg,
            links: _wrapped(_linkList(require('./.links')), 'Links'),
            tutorials: _wrapped(_tutorialList('*.md', link), 'Tutorials')
        }
    }
}

module.exports = function (callback) {
    var pattern = path.join(__dirname, '/.*.md.hbs');
    async.waterfall([
        function (callback) {
            glob(pattern, callback);
        },
        function (filenames, callback) {
            var bud = filenames
                .map(function (filename) {
                    var name = path.basename(filename, '.md.hbs').replace(/^\./, '');
                    return [
                        _tutorialBud(filename, name + '.md', '+ [%s](%s.md)'),
                        _tutorialBud(filename, '.jsdoc_precompiled/' + name + '.md', '+ [%s](%s.md)', function (line, i, lines) {
                            var prev = lines[i - 1];
                            if (/^```/.test(prev)) {
                                // Add ink-docstrap lang markup.
                                var lang = prev.replace(/```/, '').trim();
                                if (lang) {
                                    return format('{@lang %s}', lang) + line;
                                }
                            }
                            return line;
                        })
                    ];
                })
                .reduce(_concat, []);
            callback(null, bud);
        }
    ], callback);

};

