### Overview

With {{pkg.name}}, you can generate any file with *2* step.

1. Create a `.bud` file.
2. Run `coz render` command.

A bud contains file meta data like:

+ Which template to use?
+ Where to render it?
+ What permission to give?

, and so on.

More detail about bud is described in the next tutorial: [03 - Mastering coz bud][tutorial_03_mastering_coz_bud_url]


*****

### Basic usage.


The most simple usage is generate a single file from a single `.bud` file.

Here is an example:

**.who-likes-what.txt.bud** (bud file)
```javascript
{{{read '../examples/01-minimum-demo/.who-likes-what.txt.bud'}}}
```

As you see, `.bud` file is actuary a JavaScript file and could be exported an a Node.js module.

Save this file as `.who-likes-what.txt.bud` and then, run:

```bash
# Render the bud file
$ coz render ".who-likes-what.txt.bud"
```

This will generate a file named `who-likes-what.txt`.

**who-likes-what.txt** (generated file)
```
{{{read '../examples/01-minimum-demo/who-likes-what.txt'}}}
```

*****


### Separate template and data.

For more comple rending, you may want to save template and and to seperated files from the `.bud` file.

`tmpl` attribute could be a file path.

`data` attribute may be js/json module, acquired via `require`.


**.what-colors.html.bud** (bud file)

```javascript
{{{read '../examples/02-separated-template/.what-colors.html.bud'}}}
```

**.what-colors.html.hbs** (template file)

```xml
{{{read '../examples/02-separated-template/.what-colors.html.hbs'}}}
```

And run:

```bash
# Render the bud file
$ coz render ".what-colors.html.bud"
```

will generate:

**what-colors.html** (generated file)
```xml
{{{read '../examples/02-separated-template/what-colors.html'}}}
```


___

### See also

{{{seeAlso}}}


### Tutorials

{{{tutorials}}}

### Links

+ [{{pkg.name}} @ npm][my_npm_url]

{{{urls}}}